// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BinlogMessageProto.proto

package org.dbsyncer.storage.binlog.proto;

/**
 * Protobuf type {@code BinlogMessage}
 */
public final class BinlogMessage extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:BinlogMessage)
        BinlogMessageOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use BinlogMessage.newBuilder() to construct.
  private BinlogMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private BinlogMessage() {
    tableGroupId_ = "";
    event_ = 0;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
          UnusedPrivateParameter unused) {
    return new BinlogMessage();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }

  private BinlogMessage(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            tableGroupId_ = s;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            event_ = rawValue;
            break;
          }
          case 26: {
            BinlogMap.Builder subBuilder = null;
            if (data_ != null) {
              subBuilder = data_.toBuilder();
            }
            data_ = input.readMessage(BinlogMap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(data_);
              data_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor
  getDescriptor() {
    return BinlogMessageProto.internal_static_BinlogMessage_descriptor;
  }

  @Override
  protected FieldAccessorTable
  internalGetFieldAccessorTable() {
    return BinlogMessageProto.internal_static_BinlogMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                    BinlogMessage.class, Builder.class);
  }

  public static final int TABLE_GROUP_ID_FIELD_NUMBER = 1;
  private volatile Object tableGroupId_;

  /**
   * <code>string table_group_id = 1;</code>
   *
   * @return The tableGroupId.
   */
  @Override
  public String getTableGroupId() {
    Object ref = tableGroupId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      tableGroupId_ = s;
      return s;
    }
  }

  /**
   * <code>string table_group_id = 1;</code>
   *
   * @return The bytes for tableGroupId.
   */
  @Override
  public com.google.protobuf.ByteString
  getTableGroupIdBytes() {
    Object ref = tableGroupId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                      (String) ref);
      tableGroupId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EVENT_FIELD_NUMBER = 2;
  private int event_;

  /**
   * <code>.EventEnum event = 2;</code>
   *
   * @return The enum numeric value on the wire for event.
   */
  @Override
  public int getEventValue() {
    return event_;
  }

  /**
   * <code>.EventEnum event = 2;</code>
   *
   * @return The event.
   */
  @Override
  public EventEnum getEvent() {
    @SuppressWarnings("deprecation")
    EventEnum result = EventEnum.valueOf(event_);
    return result == null ? EventEnum.UNRECOGNIZED : result;
  }

  public static final int DATA_FIELD_NUMBER = 3;
  private BinlogMap data_;

  /**
   * <code>.BinlogMap data = 3;</code>
   *
   * @return Whether the data field is set.
   */
  @Override
  public boolean hasData() {
    return data_ != null;
  }

  /**
   * <code>.BinlogMap data = 3;</code>
   *
   * @return The data.
   */
  @Override
  public BinlogMap getData() {
    return data_ == null ? BinlogMap.getDefaultInstance() : data_;
  }

  /**
   * <code>.BinlogMap data = 3;</code>
   */
  @Override
  public BinlogMapOrBuilder getDataOrBuilder() {
    return getData();
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
          throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableGroupId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableGroupId_);
    }
    if (event_ != EventEnum.UPDATE.getNumber()) {
      output.writeEnum(2, event_);
    }
    if (data_ != null) {
      output.writeMessage(3, getData());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tableGroupId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableGroupId_);
    }
    if (event_ != EventEnum.UPDATE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(2, event_);
    }
    if (data_ != null) {
      size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(3, getData());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof BinlogMessage)) {
      return super.equals(obj);
    }
    BinlogMessage other = (BinlogMessage) obj;

    if (!getTableGroupId()
            .equals(other.getTableGroupId())) return false;
    if (event_ != other.event_) return false;
    if (hasData() != other.hasData()) return false;
    if (hasData()) {
      if (!getData()
              .equals(other.getData())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TABLE_GROUP_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTableGroupId().hashCode();
    hash = (37 * hash) + EVENT_FIELD_NUMBER;
    hash = (53 * hash) + event_;
    if (hasData()) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static BinlogMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static BinlogMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static BinlogMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static BinlogMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static BinlogMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static BinlogMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static BinlogMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
  }

  public static BinlogMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static BinlogMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
  }

  public static BinlogMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }

  public static BinlogMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
  }

  public static BinlogMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(BinlogMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
          BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   * Protobuf type {@code BinlogMessage}
   */
  public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:BinlogMessage)
          BinlogMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return BinlogMessageProto.internal_static_BinlogMessage_descriptor;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
      return BinlogMessageProto.internal_static_BinlogMessage_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      BinlogMessage.class, Builder.class);
    }

    // Construct using org.dbsyncer.storage.binlog.proto.BinlogMessage.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
            BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }

    @Override
    public Builder clear() {
      super.clear();
      tableGroupId_ = "";

      event_ = 0;

      if (dataBuilder_ == null) {
        data_ = null;
      } else {
        data_ = null;
        dataBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
    getDescriptorForType() {
      return BinlogMessageProto.internal_static_BinlogMessage_descriptor;
    }

    @Override
    public BinlogMessage getDefaultInstanceForType() {
      return BinlogMessage.getDefaultInstance();
    }

    @Override
    public BinlogMessage build() {
      BinlogMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public BinlogMessage buildPartial() {
      BinlogMessage result = new BinlogMessage(this);
      result.tableGroupId_ = tableGroupId_;
      result.event_ = event_;
      if (dataBuilder_ == null) {
        result.data_ = data_;
      } else {
        result.data_ = dataBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }

    @Override
    public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
      return super.setField(field, value);
    }

    @Override
    public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @Override
    public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @Override
    public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @Override
    public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
      return super.addRepeatedField(field, value);
    }

    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof BinlogMessage) {
        return mergeFrom((BinlogMessage) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(BinlogMessage other) {
      if (other == BinlogMessage.getDefaultInstance()) return this;
      if (!other.getTableGroupId().isEmpty()) {
        tableGroupId_ = other.tableGroupId_;
        onChanged();
      }
      if (other.event_ != 0) {
        setEventValue(other.getEventValue());
      }
      if (other.hasData()) {
        mergeData(other.getData());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      BinlogMessage parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (BinlogMessage) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private Object tableGroupId_ = "";

    /**
     * <code>string table_group_id = 1;</code>
     * @return The tableGroupId.
     */
    public String getTableGroupId() {
      Object ref = tableGroupId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        tableGroupId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }

    /**
     * <code>string table_group_id = 1;</code>
     * @return The bytes for tableGroupId.
     */
    public com.google.protobuf.ByteString
    getTableGroupIdBytes() {
      Object ref = tableGroupId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                        (String) ref);
        tableGroupId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <code>string table_group_id = 1;</code>
     * @param value The tableGroupId to set.
     * @return This builder for chaining.
     */
    public Builder setTableGroupId(
            String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      tableGroupId_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>string table_group_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTableGroupId() {

      tableGroupId_ = getDefaultInstance().getTableGroupId();
      onChanged();
      return this;
    }

    /**
     * <code>string table_group_id = 1;</code>
     * @param value The bytes for tableGroupId to set.
     * @return This builder for chaining.
     */
    public Builder setTableGroupIdBytes(
            com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      tableGroupId_ = value;
      onChanged();
      return this;
    }

    private int event_ = 0;

    /**
     * <code>.EventEnum event = 2;</code>
     * @return The enum numeric value on the wire for event.
     */
    @Override
    public int getEventValue() {
      return event_;
    }

    /**
     * <code>.EventEnum event = 2;</code>
     * @param value The enum numeric value on the wire for event to set.
     * @return This builder for chaining.
     */
    public Builder setEventValue(int value) {

      event_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>.EventEnum event = 2;</code>
     * @return The event.
     */
    @Override
    public EventEnum getEvent() {
      @SuppressWarnings("deprecation")
      EventEnum result = EventEnum.valueOf(event_);
      return result == null ? EventEnum.UNRECOGNIZED : result;
    }

    /**
     * <code>.EventEnum event = 2;</code>
     * @param value The event to set.
     * @return This builder for chaining.
     */
    public Builder setEvent(EventEnum value) {
      if (value == null) {
        throw new NullPointerException();
      }

      event_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     * <code>.EventEnum event = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEvent() {

      event_ = 0;
      onChanged();
      return this;
    }

    private BinlogMap data_;
    private com.google.protobuf.SingleFieldBuilderV3<
            BinlogMap, BinlogMap.Builder, BinlogMapOrBuilder> dataBuilder_;

    /**
     * <code>.BinlogMap data = 3;</code>
     * @return Whether the data field is set.
     */
    public boolean hasData() {
      return dataBuilder_ != null || data_ != null;
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     * @return The data.
     */
    public BinlogMap getData() {
      if (dataBuilder_ == null) {
        return data_ == null ? BinlogMap.getDefaultInstance() : data_;
      } else {
        return dataBuilder_.getMessage();
      }
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public Builder setData(BinlogMap value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        data_ = value;
        onChanged();
      } else {
        dataBuilder_.setMessage(value);
      }

      return this;
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public Builder setData(
            BinlogMap.Builder builderForValue) {
      if (dataBuilder_ == null) {
        data_ = builderForValue.build();
        onChanged();
      } else {
        dataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public Builder mergeData(BinlogMap value) {
      if (dataBuilder_ == null) {
        if (data_ != null) {
          data_ =
                  BinlogMap.newBuilder(data_).mergeFrom(value).buildPartial();
        } else {
          data_ = value;
        }
        onChanged();
      } else {
        dataBuilder_.mergeFrom(value);
      }

      return this;
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public Builder clearData() {
      if (dataBuilder_ == null) {
        data_ = null;
        onChanged();
      } else {
        data_ = null;
        dataBuilder_ = null;
      }

      return this;
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public BinlogMap.Builder getDataBuilder() {

      onChanged();
      return getDataFieldBuilder().getBuilder();
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    public BinlogMapOrBuilder getDataOrBuilder() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilder();
      } else {
        return data_ == null ?
                BinlogMap.getDefaultInstance() : data_;
      }
    }

    /**
     * <code>.BinlogMap data = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            BinlogMap, BinlogMap.Builder, BinlogMapOrBuilder>
    getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                BinlogMap, BinlogMap.Builder, BinlogMapOrBuilder>(
                getData(),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }

    @Override
    public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:BinlogMessage)
  }

  // @@protoc_insertion_point(class_scope:BinlogMessage)
  private static final BinlogMessage DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new BinlogMessage();
  }

  public static BinlogMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BinlogMessage>
          PARSER = new com.google.protobuf.AbstractParser<BinlogMessage>() {
    @Override
    public BinlogMessage parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return new BinlogMessage(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<BinlogMessage> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<BinlogMessage> getParserForType() {
    return PARSER;
  }

  @Override
  public BinlogMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

